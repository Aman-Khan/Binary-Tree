    void mapWithParents(TreeNode* root, map<TreeNode*, TreeNode*>& nodeToPar){
        if(!root || (!root->left && !root->right)) return;
        if(root->left) nodeToPar[root->left] = root;
        if(root->right) nodeToPar[root->right] = root;
        mapWithParents(root->left, nodeToPar);
        mapWithParents(root->right, nodeToPar);
    }
    vector<int> distanceK(TreeNode* root, TreeNode* target, int k) {
        vector<int> ans;
        if(!root) return ans;
        map<TreeNode*, TreeNode*> nodeToPar;
        mapWithParents(root, nodeToPar);
        map<TreeNode*, int> vis;
        queue<TreeNode*> q;
        q.push(target);
        vis[target];
        int lvl = 0;
        while(!q.empty()){
            int sz = q.size();
            for(int i=0; i<sz; i++){
                TreeNode* node = q.front();
                cout<<node->val<<" ";
                if(lvl==k){
                    ans.push_back(node->val);
                }
                q.pop();
                if(node->left && vis.find(node->left)==vis.end()){
                    q.push(node->left);
                    vis[node->left];
                }
                if(node->right && vis.find(node->right)==vis.end()){
                    q.push(node->right);
                    vis[node->right];
                }
                if(nodeToPar.find(node)!=nodeToPar.end() && vis.find(nodeToPar[node])==vis.end()){
                    q.push(nodeToPar[node]);
                    vis[nodeToPar[node]];
                }
            }
            lvl++;
            if(lvl>k) break;
        }
        return ans;
    }
